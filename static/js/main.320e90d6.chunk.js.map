{"version":3,"sources":["components/Card.jsx","components/CardList.jsx","components/SearchBox.jsx","components/Scroll.jsx","components/ErrorBoundary.jsx","containers/App.jsx","actions.js","constants.js","reducers.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","src","concat","id","alt","name","email","CardList","_ref","robots","map","robot","components_Card","key","SearchBox","searchChange","onChange","type","placeholder","Scroll","style","overflowY","border","height","children","ErrorBoundary","state","hasError","this","setState","React","Component","App","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","toLowerCase","includes","components_SearchBox","components_Scroll","components_ErrorBoundary","components_CardList","connect","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","initialStateSearch","initialStateRobots","Boolean","window","location","hostname","match","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","Object","objectSpread","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","react_redux_es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qRAceA,eAZF,SAACC,GACV,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uDACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAG,wBAAAC,OAA0BN,EAAMO,GAAhC,iBAAmDC,IAAI,SAC/DP,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAKH,EAAMS,KAAX,KACAR,EAAAC,EAAAC,cAAA,SAAIH,EAAMU,MAAV,SCMDC,EAXE,SAAAC,GAEb,OAF2BA,EAAZC,OAGJC,IAAI,SAACC,GACR,OACId,EAAAC,EAAAC,cAACa,EAAD,CAAOC,IAAOF,EAAMR,GAAIA,GAAIQ,EAAMR,GAAIE,KAAMM,EAAMN,KAAMC,MAAOK,EAAML,WCCtEQ,EAPG,SAAAN,GAAA,IAAEO,EAAFP,EAAEO,aAAF,OACdlB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,SAAOiB,SAAUD,EAAcE,KAAK,OAAOjB,UAAU,mCAAmCkB,YAAY,oBCO7FC,EATA,SAACvB,GACZ,OACIC,EAAAC,EAAAC,cAAA,OAAKqB,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAChE3B,EAAM4B,WCiBJC,6MAnBXC,MAAQ,CACJC,UAAU,sFAGVC,KAAKC,SAAS,CACVF,UAAU,qCAKf,OACKC,KAAKF,MAAMC,SAAW9B,EAAAC,EAAAC,cAAA,oCACvB6B,KAAKhC,MAAM4B,gBAbMM,IAAMC,WCwB5BC,8LAIFJ,KAAKhC,MAAMqC,mDAIJ,IAAAC,EACiDN,KAAKhC,MAAvDuC,EADCD,EACDC,YAAaC,EADZF,EACYE,eAAgB3B,EAD5ByB,EAC4BzB,OAAQ4B,EADpCH,EACoCG,UACrCC,EAAiB7B,EAAO8B,OAAO,SAAC5B,GACpC,OACEA,EAAMN,KAAKmC,cAAcC,SAASN,EAAYK,iBAGlD,OAAOH,EAAYxC,EAAAC,EAAAC,cAAA,qBAEfF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACTH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,eACAH,EAAAC,EAAAC,cAAC2C,EAAD,CAAW3B,aAAgBqB,IAC3BvC,EAAAC,EAAAC,cAAC4C,EAAD,KACE9C,EAAAC,EAAAC,cAAC6C,EAAD,KACA/C,EAAAC,EAAAC,cAAC8C,EAAD,CAAUpC,OAAQ6B,cAtBhBR,IAAMC,WA+BTe,cA9CS,SAAApB,GACtB,MAAO,CACLS,YAAaT,EAAMqB,aAAaZ,YAChC1B,OAAQiB,EAAMsB,cAAcvC,OAC5B4B,UAAWX,EAAMsB,cAAcX,UAC/BY,MAAOvB,EAAMsB,cAAcC,QAIJ,SAACC,GAC3B,MAAO,CAAEd,eAAgB,SAACe,GAAD,OAAWD,ECdI,CACrCjC,KCR8B,qBDS9BmC,QDYyDD,EAAME,OAAOC,SACxErB,gBAAiB,kBAAMiB,ECVU,SAACA,GAChCA,EAAS,CACLjC,KCZ8B,2BDclCsC,MAAM,8CACPC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAACG,GAAD,OAAST,EAAS,CACpBjC,KChBgC,yBDiBhCmC,QAASO,MAEZC,MAAM,SAAAX,GAAK,OAAGC,EAAS,CACpBjC,KCnB+B,wBDoB/BmC,QAASH,WDiCAH,CAA6Cd,kBGlDtD6B,EAAqB,CACvB1B,YAAc,IAYZ2B,EAAqB,CACvBzB,WAAW,EACX5B,OAAQ,GACRwC,MAAO,ICXSc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCPN,IAAMC,EAASC,yBACTC,EAAcC,YAAgB,CAACxB,aFDT,WAAyC,IAAxCrB,EAAwC8C,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAlCX,EAAoBc,EAAcH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAP,GAC1D,OAAQG,EAAO1D,MACX,IDb0B,qBCc1B,OAAO2D,OAAAC,EAAA,EAAAD,CAAA,GAAKlD,EAAZ,CAAmBS,YAAawC,EAAOvB,UACvC,QACA,OAAO1B,IEJoCsB,cFctB,WAAyC,IAAxCtB,EAAwC8C,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAlCV,EAAoBa,EAAcH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAP,GAC3D,OAAQG,EAAO1D,MACX,ID1B8B,yBC2B9B,OAAO2D,OAAAC,EAAA,EAAAD,CAAA,GAAIlD,EAAX,CAAkBW,WAAW,IAC7B,ID3B8B,yBC4B9B,OAAOuC,OAAAC,EAAA,EAAAD,CAAA,GAAIlD,EAAX,CAAkBW,WAAW,EAAO5B,OAAQkE,EAAOvB,UACnD,ID5B6B,wBC6B7B,OAAOwB,OAAAC,EAAA,EAAAD,CAAA,GAAIlD,EAAX,CAAkBW,WAAW,EAAOY,MAAO0B,EAAOvB,UAClD,QAAU,OAAO1B,MErBnBoD,EAAQC,YAAYT,EAAaU,YAAgBC,IAAiBb,IAGxEc,IAASC,OACTtF,EAAAC,EAAAC,cAACqF,EAAA,EAAD,CAAUN,MAAOA,GACjBjF,EAAAC,EAAAC,cAACsF,EAAD,OACaC,SAASC,eAAe,SD8G/B,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlC,KAAK,SAAAmC,GACjCA,EAAaC","file":"static/js/main.320e90d6.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Card = (props) => {\n    return(\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n            <img src={`https://robohash.org/${props.id}?size=200x200`} alt=\"Card\"/>\n            <div>\n                <h2>{props.name} </h2>\n                <p>{props.email} </p>\n            </div>\n        </div>\n       \n    );\n}\nexport default Card;","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({robots}) => {\n    \n    return(\n        robots.map((robot) => {\n            return(\n                <Card  key = {robot.id} id={robot.id} name={robot.name} email={robot.email} />\n            );\n        })\n    );\n}\n\nexport default CardList;","import React from \"react\";\n\nconst SearchBox = ({searchChange}) => (\n    <div className=\"pa2\" >\n        <input onChange={searchChange} type=\"text\" className=\"pa3 ba b--green bg-lightest-blue\" placeholder=\"Search Robots\"/>\n    </div>\n);\n    \n   \nexport default SearchBox;","import React from \"react\";\n\nconst Scroll = (props) => {\n    return(\n        <div style={{overflowY: \"scroll\", border: \"3px solid black\", height: \"500px\"}} >\n            {props.children}\n        </div>\n    );\n}\n\n\nexport default Scroll","import React from \"react\";\n\nclass ErrorBoundary extends React.Component {\n    state = {\n        hasError: false\n    }\n    componentDidCatch() {\n        this.setState({\n            hasError: true\n        })\n    }\n\n    render() {\n       return(\n           (this.state.hasError)? <h1>Ooops! That's Not Good</h1> :\n           this.props.children\n       );\n    }\n}\n\n\n\nexport default ErrorBoundary","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport \"tachyons\";\nimport \"./App.css\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\";\nimport ErrorBoundary from \"../components/ErrorBoundary\";\nimport { setSearchField, requestRobots } from \"../actions\"\n\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n return { onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n  onRequestRobots: () => dispatch(requestRobots())\n}}\n\n\nclass App extends React.Component{\n  \n\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n\n  render() {\n   const {searchField, onSearchChange, robots, isPending} = this.props;\n    const filteredRobots = robots.filter((robot)=>{\n      return(\n        robot.name.toLowerCase().includes(searchField.toLowerCase())\n      );\n    });\n    return isPending ? <h1>Loading</h1> :\n    (\n        <div className=\"tc\">\n              <h1 className=\"f1\" >Robofriends</h1>\n              <SearchBox searchChange = {onSearchChange} />\n              <Scroll>\n                <ErrorBoundary>\n                <CardList robots={filteredRobots}/>\n              </ErrorBoundary>\n              </Scroll>\n        </div>\n      );\n    \n   \n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {CHANGE_SEARCHFIELD,\r\nREQUEST_ROBOTS_PENDING,\r\nREQUEST_ROBOTS_SUCCESS,\r\nREQUEST_ROBOTS_FAILED\r\n} from \"./constants\";\r\n\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCHFIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({\r\n        type: REQUEST_ROBOTS_PENDING\r\n    });\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n  .then(response => response.json())\r\n  .then((data)=> dispatch({\r\n      type: REQUEST_ROBOTS_SUCCESS,\r\n      payload: data\r\n  }))\r\n  .catch(error=> dispatch({\r\n      type: REQUEST_ROBOTS_FAILED,\r\n      payload: error\r\n  }))\r\n}","export const CHANGE_SEARCHFIELD = \"CHANGE_SEARCHFIELD\";\r\n\r\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\r\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\r\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";","import {CHANGE_SEARCHFIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n    } from \"./constants\";\r\n\r\n\r\nconst initialStateSearch = {\r\n    searchField : \"\"\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    switch (action.type) {\r\n        case CHANGE_SEARCHFIELD :\r\n        return { ...state, searchField: action.payload};\r\n        default:\r\n        return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: \"\"\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n    switch (action.type) {\r\n        case REQUEST_ROBOTS_PENDING :\r\n        return {...state, isPending: true};\r\n        case REQUEST_ROBOTS_SUCCESS :\r\n        return {...state, isPending: false, robots: action.payload};\r\n        case REQUEST_ROBOTS_FAILED :\r\n        return {...state, isPending: false, error: action.payload};\r\n        default : return state;\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport thunkMiddleware from \"redux-thunk\";\nimport {createLogger} from \"redux-logger\";\nimport {Provider} from \"react-redux\";\nimport {createStore, applyMiddleware, combineReducers} from \"redux\";\nimport App from './containers/App';\nimport \"./index.css\"\nimport {searchRobots, requestRobots} from \"./reducers\";\nimport * as serviceWorker from './serviceWorker';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\n\nReactDOM.render(\n<Provider store={store}>\n<App/>\n</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}